package com.fuint.module.backendApi.controller;

import com.fuint.common.dto.AccountInfo;
import com.fuint.common.util.TokenUtil;
import com.fuint.framework.web.BaseController;
import com.fuint.framework.web.ResponseObject;
import com.fuint.common.Constants;
import com.fuint.common.enums.StatusEnum;
import com.fuint.common.service.${tableClass}Service;
import com.fuint.framework.pagination.PaginationRequest;
import com.fuint.framework.pagination.PaginationResponse;
import com.fuint.framework.exception.BusinessCheckException;
import com.fuint.repository.model.${className};
import com.fuint.utils.StringUtil;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import lombok.AllArgsConstructor;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;
import javax.servlet.http.HttpServletRequest;
import java.util.HashMap;
import java.util.Map;

/**
 * ${moduleName}管理类controller
 *
 * Created by ${author}
 * CopyRight https://www.fuint.cn
 */
@Api(tags="管理端-${moduleName}相关接口")
@RestController
@AllArgsConstructor
@RequestMapping(value = "/backendApi/${tableName}")
public class Backend${tableClass}Controller extends BaseController {

    /**
     * ${moduleName}服务接口
     */
    private ${tableClass}Service ${serviceName}Service;

    /**
     * ${moduleName}列表查询
     *
     * @param  request HttpServletRequest对象
     * @return ${moduleName}列表
     */
    @ApiOperation(value = "${moduleName}列表查询")
    @RequestMapping(value = "/list", method = RequestMethod.GET)
    @CrossOrigin
    @PreAuthorize("@pms.hasPermission('${tableName}:list')")
    public ResponseObject list(HttpServletRequest request) throws BusinessCheckException {
        String token = request.getHeader("Access-Token");
        Integer page = request.getParameter("page") == null ? Constants.PAGE_NUMBER : Integer.parseInt(request.getParameter("page"));
        Integer pageSize = request.getParameter("pageSize") == null ? Constants.PAGE_SIZE : Integer.parseInt(request.getParameter("pageSize"));
        String title = request.getParameter("title");
        String status = request.getParameter("status");
        String searchStoreId = request.getParameter("storeId");

        AccountInfo accountInfo = TokenUtil.getAccountInfoByToken(token);
        Integer storeId = accountInfo.getStoreId();

        PaginationRequest paginationRequest = new PaginationRequest();
        paginationRequest.setCurrentPage(page);
        paginationRequest.setPageSize(pageSize);

        Map<String, Object> params = new HashMap<>();
        if (accountInfo.getMerchantId() != null && accountInfo.getMerchantId() > 0) {
            params.put("merchantId", accountInfo.getMerchantId());
        }
        if (StringUtil.isNotEmpty(title)) {
            params.put("title", title);
        }
        if (StringUtil.isNotEmpty(status)) {
            params.put("status", status);
        }
        if (StringUtil.isNotEmpty(searchStoreId)) {
            params.put("storeId", searchStoreId);
        }
        if (storeId != null && storeId > 0) {
            params.put("storeId", storeId);
        }
        paginationRequest.setSearchParams(params);
        PaginationResponse<${className}> paginationResponse = ${serviceName}Service.query${tableClass}ListByPagination(paginationRequest);

        Map<String, Object> paramsStore = new HashMap<>();
        paramsStore.put("status", StatusEnum.ENABLED.getKey());
        if (accountInfo.getStoreId() != null && accountInfo.getStoreId() > 0) {
            paramsStore.put("storeId", accountInfo.getStoreId().toString());
        }
        if (accountInfo.getMerchantId() != null && accountInfo.getMerchantId() > 0) {
            paramsStore.put("merchantId", accountInfo.getMerchantId());
        }

        Map<String, Object> result = new HashMap<>();
        result.put("paginationResponse", paginationResponse);

        return getSuccessResult(result);
    }

    /**
     * 更新${moduleName}状态
     *
     * @return
     */
    @ApiOperation(value = "更新${moduleName}状态")
    @RequestMapping(value = "/updateStatus", method = RequestMethod.POST)
    @CrossOrigin
    @PreAuthorize("@pms.hasPermission('${tableName}:edit')")
    public ResponseObject updateStatus(HttpServletRequest request, @RequestBody Map<String, Object> params) throws BusinessCheckException {
        String token = request.getHeader("Access-Token");
        String status = params.get("status") != null ? params.get("status").toString() : StatusEnum.ENABLED.getKey();
        Integer id = params.get("id") == null ? 0 : Integer.parseInt(params.get("id").toString());

        AccountInfo accountInfo = TokenUtil.getAccountInfoByToken(token);

        ${className} ${tablePrefix}${tableClass} = ${serviceName}Service.query${tableClass}ById(id);
        if (${tablePrefix}${tableClass} == null) {
            return getFailureResult(201);
        }

        String operator = accountInfo.getAccountName();
        ${tablePrefix}${tableClass}.setOperator(operator);
        ${tablePrefix}${tableClass}.setStatus(status);
        ${serviceName}Service.update${tableClass}(${tablePrefix}${tableClass});

        return getSuccessResult(true);
    }

    /**
     * 保存${moduleName}
     *
     * @param request HttpServletRequest对象
     * @return
     */
    @ApiOperation(value = "保存${moduleName}")
    @RequestMapping(value = "/save", method = RequestMethod.POST)
    @CrossOrigin
    @PreAuthorize("@pms.hasPermission('${tableName}:add')")
    public ResponseObject saveHandler(HttpServletRequest request, @RequestBody Map<String, Object> params) throws BusinessCheckException {
        String token = request.getHeader("Access-Token");
        String id = params.get("id") == null ? "" : params.get("id").toString();
        String status = params.get("status") == null ? "" : params.get("status").toString();
        String storeId = params.get("storeId") == null ? "0" : params.get("storeId").toString();

        AccountInfo accountInfo = TokenUtil.getAccountInfoByToken(token);

        ${className} info = new ${className}();
        info.setOperator(accountInfo.getAccountName());
        info.setStatus(status);
        info.setStoreId(Integer.parseInt(storeId));
        info.setMerchantId(accountInfo.getMerchantId());
        if (StringUtil.isNotEmpty(id)) {
            info.setId(Integer.parseInt(id));
            ${serviceName}Service.update${tableClass}(info);
        } else {
            ${serviceName}Service.add${tableClass}(info);
        }

        return getSuccessResult(true);
    }

    /**
     * 获取${moduleName}详情
     *
     * @param id
     * @return
     */
    @ApiOperation(value = "获取${moduleName}详情")
    @RequestMapping(value = "/info/{id}", method = RequestMethod.GET)
    @CrossOrigin
    @PreAuthorize("@pms.hasPermission('${tableName}:list')")
    public ResponseObject info(@PathVariable("id") Integer id) throws BusinessCheckException {
        ${className} ${tableName}Info = ${serviceName}Service.query${tableClass}ById(id);

        Map<String, Object> result = new HashMap<>();
        result.put("${tableName}Info", ${tableName}Info);

        return getSuccessResult(result);
    }
}
